{"changed":true,"filter":false,"title":"asdf.java","tooltip":"/asdf/asdf.java","value":"///////////////////////\n//      TESTING      //\n///////////////////////\n\n////////////////////////////////////////////////////////////////////////////\n//Matthew Koh\n////14\n//Lab/Hw\n//Program Name\n//\n//Start\n\nimport java.util.Scanner;\n\nimport java.util.Scanner;\npublic class asdf {\n    public static void main(String[] arg) {\n        int m;\n        //force user to enter int in range 1-9, inclusive.\n        m = getInt();\n        allBlocks(m);\n    }\n/*\nProblems & Solutions\n[B]: allBlocks(int x): Must print the 'stack' of blocks\n    [B1]: block(): print each individual block with same width\n        [B1a]: line(): generate each line with the right numbers and indent distance\n*/\n\n    public static int getInt() {                                                //[A]: getInt(): Prompt user for an int\n        Scanner scan;\n        scan = new Scanner(System.in);\n        boolean isDigit = false;\n        int userInput = 0;\n        System.out.print(\"Enter an int between 1 and 9, inclusive: \");\n        while (isDigit != true){\n            userInput = checkInt(scan);                                         //[A1]: checkInt()\n            isDigit = checkRange(userInput);                                    //[A2]: checkRange()\n            if(isDigit == false){\n                System.out.print(\"You did not enter an int in [1,9]; try again: \");\n                continue;\n            }else{break;}\n        }\n        return userInput;\n    }\n\n    public static int checkInt(Scanner scan){                                   //[A1]: checkInt(): input is an int\n        while(true){\n            if(scan.hasNextInt()){\n                int userNumber = scan.nextInt();\n                boolean ifPositive = checkRange(userNumber);\n                return userNumber;\n            }\n            else{\n                System.out.print(\"You did not enter an int. try again: \");\n                scan.next();\n                continue;\n            }\n        }\n    }\n\n    public static boolean checkRange(int testInt){                              //[A2]: checkRange(): input is positive\n        boolean posTest = (testInt >= 1 && testInt <= 9)?true:false;\n        return posTest;\n    }\n    \n/*\nALL BLOCKMAKING VARIABLES\nAll variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes, dashes\n\nSentry Variables: REMEMBER TO RESET\nwhich Block\n    increment up\n        whichBlock = 1\n            In: allblocks, block, line\nwhich Line\n    increment up\n        whichLineInBlock = 1\n            In: allblocks, block\nwhich Number\n    increment up\n        whichNumberInLine = 1\n            In: allblocks, block, line\nwhich Space\n    increment up\n        whichSpace = 1\n            In: line\n            \nActual Variables:\n\nhow many total blocks are being made(in the program)?\n    int x = # blocks\n        The user input x: there will be x blocks.\n            In: allblocks, block, line\n    \nhow many total lines are being entered (in the block)?\n    int whichBlock = # lines\n        Whichever block you are on will have that many lines in the block.\n            In: allblocks, block, line\n        \nhow many total numbers being printed(in the line)?\n    int numNums = 2*whichBlock-1 = # numbers\n        Whichever block you are on will have (2*whichBlock-1) numbers printed on the line.\n            In: line\n        \nhow many spaces (on left and right)?\n    int spaces = x - whichBlock\n        Every line will have  ((2x-1) - (2*whichBlock-1))/2\n                            = (2x-1-2*whichBlock+1)/2\n                            = (2x-2*whichBlock/2)\n                            = 2(x-whichBlock)/2\n                            = (x-whichBlock) spaces to the left and to the right of the printed numbers.\n            In: line\n\nwhat about the lines after each block?\n    Make sure to print a line when \n        HAVE numBlock EQUAL dashes INSTEAD OF whichBlock WHEN PRINTING THE ADDITIONAL LINE\n    PRINT AN ADDITIONAL LINE WITH -'S INSTEAD OF whichBlock WHEN whichBlock == whichLineInBlock\n*/\n    public static void allBlocks(int x){\n        int whichBlock = 1;\n        for(whichBlock = 1; whichBlock <= x; whichBlock++){\n            block(x, whichBlock);\n        }\n        return;\n        //All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes\n        //NEED: x\n        //MADE: whichBlock\n    }\n    \n    public static void block(int x, int whichBlock){\n        int whichLineInBlock = 1;\n        int numBlock = whichBlock, dashes = 0;\n        for(whichLineInBlock = 1; whichLineInBlock <= whichBlock; whichLineInBlock++){\n            line(x, whichBlock, whichLineInBlock, numBlock);\n            System.out.println();\n            if(whichLineInBlock == whichBlock){\n                line(x, whichBlock, whichLineInBlock, dashes);\n                System.out.println();\n            }\n        }\n        return;\n        //All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes\n        //NEED: x, whichBlock, \n        //MADE: whichLineInBlock, numBlock, dashes\n    }\n    \n    public static void line(int x, int whichBlock, int whichLineInBlock, int numBlock){\n        int spaces = x - whichBlock;\n        int numNums = 2*whichBlock-1;\n        int whichSpace = 1;\n        int whichNumberInLine = 1;\n        for(whichSpace = 1; whichSpace <= spaces; whichSpace++){\n            System.out.print(' ');\n        }\n        for(whichNumberInLine = 1; whichNumberInLine <= numNums; whichNumberInLine++){\n            if(numBlock > 0){\n                System.out.print(numBlock);\n            }else{System.out.print(\"-\");}\n            \n        }\n        for(whichSpace = 1; whichSpace <= spaces; whichSpace++){\n            System.out.print(' ');\n        }\n        //System.out.print(\"whichBlock: \"+whichBlock+\" whichLineInBlock: \"+whichLineInBlock+\" whichNumberInLine: \"+whichNumberInLine);\n        return;\n        //All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes\n        //NEED: x, whichBlock, whichLineInBlock, numBlock/dashes\n        //MADE: spaces, numNums, whichSpace, whichNumberInLine\n    }\n\n}\n\n/*\nallBlocks(int x) (how many blocks) makes number of blocks\nblock() (the stuff in each block) makes number of lines\nline() (the stuff in each line) makes proper numbers and indent spacings\n*/","undoManager":{"mark":98,"position":100,"stack":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":137,"column":55},"end":{"row":137,"column":56}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":137,"column":56},"end":{"row":137,"column":57}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":137,"column":57},"end":{"row":137,"column":58}},"text":"h"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":137,"column":58},"end":{"row":137,"column":59}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":137,"column":59},"end":{"row":137,"column":60}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":12},"end":{"row":156,"column":13}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":13},"end":{"row":156,"column":14}},"text":"f"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":14},"end":{"row":156,"column":15}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":15},"end":{"row":156,"column":16}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":15},"end":{"row":156,"column":16}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":16},"end":{"row":156,"column":17}},"text":"u"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":17},"end":{"row":156,"column":18}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":18},"end":{"row":156,"column":19}},"text":"B"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":19},"end":{"row":156,"column":20}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":20},"end":{"row":156,"column":21}},"text":"o"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":21},"end":{"row":156,"column":22}},"text":"c"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":22},"end":{"row":156,"column":23}},"text":"k"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":23},"end":{"row":156,"column":24}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":24},"end":{"row":156,"column":25}},"text":"_"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":156,"column":24},"end":{"row":156,"column":25}},"text":"_"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":156,"column":23},"end":{"row":156,"column":24}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":23},"end":{"row":156,"column":24}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":156,"column":23},"end":{"row":156,"column":24}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":23},"end":{"row":156,"column":24}},"text":"-"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":156,"column":23},"end":{"row":156,"column":24}},"text":"-"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":23},"end":{"row":156,"column":24}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":24},"end":{"row":156,"column":25}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":23},"end":{"row":156,"column":24}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":156,"column":25},"end":{"row":156,"column":26}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":156,"column":24},"end":{"row":156,"column":25}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":24},"end":{"row":156,"column":25}},"text":">"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":25},"end":{"row":156,"column":26}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":26},"end":{"row":156,"column":27}},"text":"-"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":156,"column":26},"end":{"row":156,"column":27}},"text":"-"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":26},"end":{"row":156,"column":27}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":156,"column":26},"end":{"row":156,"column":27}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":26},"end":{"row":156,"column":27}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":28},"end":{"row":157,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":157,"column":0},"end":{"row":157,"column":12}},"text":"            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":28},"end":{"row":156,"column":29}},"text":"{"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":156,"column":29},"end":{"row":157,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":157,"column":0},"end":{"row":158,"column":0}},"lines":["                "]},{"action":"insertText","range":{"start":{"row":158,"column":0},"end":{"row":158,"column":13}},"text":"            }"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":159,"column":12},"end":{"row":159,"column":39}},"text":"System.out.print(numBlock);"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":157,"column":16},"end":{"row":157,"column":43}},"text":"System.out.print(numBlock);"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":13},"end":{"row":158,"column":14}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":14},"end":{"row":158,"column":15}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":15},"end":{"row":158,"column":16}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":16},"end":{"row":158,"column":17}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":17},"end":{"row":158,"column":19}},"text":"()"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":158,"column":18},"end":{"row":158,"column":19}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":158,"column":17},"end":{"row":158,"column":18}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":17},"end":{"row":158,"column":18}},"text":"{"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":18},"end":{"row":158,"column":19}},"text":"}"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":18},"end":{"row":158,"column":19}},"text":"S"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":19},"end":{"row":158,"column":20}},"text":"u"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":20},"end":{"row":158,"column":21}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":21},"end":{"row":158,"column":22}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":22},"end":{"row":158,"column":23}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":23},"end":{"row":158,"column":24}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":24},"end":{"row":158,"column":25}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":158,"column":24},"end":{"row":158,"column":25}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":158,"column":23},"end":{"row":158,"column":24}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":158,"column":22},"end":{"row":158,"column":23}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":158,"column":21},"end":{"row":158,"column":22}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":158,"column":20},"end":{"row":158,"column":21}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":158,"column":19},"end":{"row":158,"column":20}},"text":"u"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":19},"end":{"row":158,"column":20}},"text":"y"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":20},"end":{"row":158,"column":21}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":21},"end":{"row":158,"column":22}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":22},"end":{"row":158,"column":23}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":23},"end":{"row":158,"column":24}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":24},"end":{"row":158,"column":25}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":25},"end":{"row":158,"column":26}},"text":"o"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":26},"end":{"row":158,"column":27}},"text":"u"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":27},"end":{"row":158,"column":28}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":28},"end":{"row":158,"column":29}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":29},"end":{"row":158,"column":30}},"text":"p"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":30},"end":{"row":158,"column":31}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":31},"end":{"row":158,"column":32}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":32},"end":{"row":158,"column":33}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":33},"end":{"row":158,"column":34}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":34},"end":{"row":158,"column":35}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":35},"end":{"row":158,"column":36}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":35},"end":{"row":158,"column":36}},"text":"'"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":36},"end":{"row":158,"column":37}},"text":"\""}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":158,"column":36},"end":{"row":158,"column":37}},"text":"\""}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":158,"column":35},"end":{"row":158,"column":36}},"text":"'"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":35},"end":{"row":158,"column":36}},"text":"\""}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":36},"end":{"row":158,"column":37}},"text":"\""}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":36},"end":{"row":158,"column":37}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":158,"column":36},"end":{"row":158,"column":37}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":36},"end":{"row":158,"column":37}},"text":"-"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":39},"end":{"row":158,"column":40}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":158,"column":39},"end":{"row":158,"column":40}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":158,"column":39},"end":{"row":158,"column":40}},"text":";"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":162,"column":30},"end":{"row":162,"column":31}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":162,"column":30},"end":{"row":162,"column":31}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":162,"column":30},"end":{"row":162,"column":31}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":162,"column":30},"end":{"row":162,"column":31}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":153,"column":30},"end":{"row":153,"column":31}},"text":"@"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":153,"column":30},"end":{"row":153,"column":31}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":177,"column":0},"end":{"row":177,"column":2}},"text":"*/"},{"action":"removeLines","range":{"start":{"row":17,"column":0},"end":{"row":177,"column":0}},"nl":"\n","lines":["        int m;","        //force user to enter int in range 1-9, inclusive.","        m = getInt();","        allBlocks(m);","    }","/*","Problems & Solutions","[B]: allBlocks(int x): Must print the 'stack' of blocks","    [B1]: block(): print each individual block with same width","        [B1a]: line(): generate each line with the right numbers and indent distance","*/","","    public static int getInt() {                                                //[A]: getInt(): Prompt user for an int","        Scanner scan;","        scan = new Scanner(System.in);","        boolean isDigit = false;","        int userInput = 0;","        System.out.print(\"Enter an int between 1 and 9, inclusive: \");","        while (isDigit != true){","            userInput = checkInt(scan);                                         //[A1]: checkInt()","            isDigit = checkRange(userInput);                                    //[A2]: checkRange()","            if(isDigit == false){","                System.out.print(\"You did not enter an int in [1,9]; try again: \");","                continue;","            }else{break;}","        }","        return userInput;","    }","","    public static int checkInt(Scanner scan){                                   //[A1]: checkInt(): input is an int","        while(true){","            if(scan.hasNextInt()){","                int userNumber = scan.nextInt();","                boolean ifPositive = checkRange(userNumber);","                return userNumber;","            }","            else{","                System.out.print(\"You did not enter an int. try again: \");","                scan.next();","                continue;","            }","        }","    }","","    public static boolean checkRange(int testInt){                              //[A2]: checkRange(): input is positive","        boolean posTest = (testInt >= 1 && testInt <= 9)?true:false;","        return posTest;","    }","    ","/*","ALL BLOCKMAKING VARIABLES","All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes, dashes","","Sentry Variables: REMEMBER TO RESET","which Block","    increment up","        whichBlock = 1","            In: allblocks, block, line","which Line","    increment up","        whichLineInBlock = 1","            In: allblocks, block","which Number","    increment up","        whichNumberInLine = 1","            In: allblocks, block, line","which Space","    increment up","        whichSpace = 1","            In: line","            ","Actual Variables:","","how many total blocks are being made(in the program)?","    int x = # blocks","        The user input x: there will be x blocks.","            In: allblocks, block, line","    ","how many total lines are being entered (in the block)?","    int whichBlock = # lines","        Whichever block you are on will have that many lines in the block.","            In: allblocks, block, line","        ","how many total numbers being printed(in the line)?","    int numNums = 2*whichBlock-1 = # numbers","        Whichever block you are on will have (2*whichBlock-1) numbers printed on the line.","            In: line","        ","how many spaces (on left and right)?","    int spaces = x - whichBlock","        Every line will have  ((2x-1) - (2*whichBlock-1))/2","                            = (2x-1-2*whichBlock+1)/2","                            = (2x-2*whichBlock/2)","                            = 2(x-whichBlock)/2","                            = (x-whichBlock) spaces to the left and to the right of the printed numbers.","            In: line","","what about the lines after each block?","    Make sure to print a line when ","        HAVE numBlock EQUAL dashes INSTEAD OF whichBlock WHEN PRINTING THE ADDITIONAL LINE","    PRINT AN ADDITIONAL LINE WITH -'S INSTEAD OF whichBlock WHEN whichBlock == whichLineInBlock","*/","    public static void allBlocks(int x){","        int whichBlock = 1;","        for(whichBlock = 1; whichBlock <= x; whichBlock++){","            block(x, whichBlock);","        }","        return;","        //All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes","        //NEED: x","        //MADE: whichBlock","    }","    ","    public static void block(int x, int whichBlock){","        int whichLineInBlock = 1;","        int numBlock = whichBlock, dashes = 0;","        for(whichLineInBlock = 1; whichLineInBlock <= whichBlock; whichLineInBlock++){","            line(x, whichBlock, whichLineInBlock, numBlock);","            System.out.println();","            if(whichLineInBlock == whichBlock){","                line(x, whichBlock, whichLineInBlock, dashes);","                System.out.println();","            }","        }","        return;","        //All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes","        //NEED: x, whichBlock, ","        //MADE: whichLineInBlock, numBlock, dashes","    }","    ","    public static void line(int x, int whichBlock, int whichLineInBlock, int numBlock){","        int spaces = x - whichBlock;","        int numNums = 2*whichBlock-1;","        int whichSpace = 1;","        int whichNumberInLine = 1;","        for(whichSpace = 1; whichSpace <= spaces; whichSpace++){","            System.out.print(' ');","        }","        for(whichNumberInLine = 1; whichNumberInLine <= numNums; whichNumberInLine++){","            if(numBlock > 0){","                System.out.print(numBlock);","            }else{System.out.print(\"-\");}","            ","        }","        for(whichSpace = 1; whichSpace <= spaces; whichSpace++){","            System.out.print(' ');","        }","        //System.out.print(\"whichBlock: \"+whichBlock+\" whichLineInBlock: \"+whichLineInBlock+\" whichNumberInLine: \"+whichNumberInLine);","        return;","        //All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes","        //NEED: x, whichBlock, whichLineInBlock, numBlock/dashes","        //MADE: spaces, numNums, whichSpace, whichNumberInLine","    }","","}","","/*","allBlocks(int x) (how many blocks) makes number of blocks","block() (the stuff in each block) makes number of lines","line() (the stuff in each line) makes proper numbers and indent spacings"]},{"action":"removeText","range":{"start":{"row":16,"column":43},"end":{"row":17,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":43},"end":{"row":17,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":17,"column":0},"end":{"row":177,"column":0}},"lines":["        int m;","        //force user to enter int in range 1-9, inclusive.","        m = getInt();","        allBlocks(m);","    }","/*","Problems & Solutions","[B]: allBlocks(int x): Must print the 'stack' of blocks","    [B1]: block(): print each individual block with same width","        [B1a]: line(): generate each line with the right numbers and indent distance","*/","","    public static int getInt() {                                                //[A]: getInt(): Prompt user for an int","        Scanner scan;","        scan = new Scanner(System.in);","        boolean isDigit = false;","        int userInput = 0;","        System.out.print(\"Enter an int between 1 and 9, inclusive: \");","        while (isDigit != true){","            userInput = checkInt(scan);                                         //[A1]: checkInt()","            isDigit = checkRange(userInput);                                    //[A2]: checkRange()","            if(isDigit == false){","                System.out.print(\"You did not enter an int in [1,9]; try again: \");","                continue;","            }else{break;}","        }","        return userInput;","    }","","    public static int checkInt(Scanner scan){                                   //[A1]: checkInt(): input is an int","        while(true){","            if(scan.hasNextInt()){","                int userNumber = scan.nextInt();","                boolean ifPositive = checkRange(userNumber);","                return userNumber;","            }","            else{","                System.out.print(\"You did not enter an int. try again: \");","                scan.next();","                continue;","            }","        }","    }","","    public static boolean checkRange(int testInt){                              //[A2]: checkRange(): input is positive","        boolean posTest = (testInt >= 1 && testInt <= 9)?true:false;","        return posTest;","    }","    ","/*","ALL BLOCKMAKING VARIABLES","All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes, dashes","","Sentry Variables: REMEMBER TO RESET","which Block","    increment up","        whichBlock = 1","            In: allblocks, block, line","which Line","    increment up","        whichLineInBlock = 1","            In: allblocks, block","which Number","    increment up","        whichNumberInLine = 1","            In: allblocks, block, line","which Space","    increment up","        whichSpace = 1","            In: line","            ","Actual Variables:","","how many total blocks are being made(in the program)?","    int x = # blocks","        The user input x: there will be x blocks.","            In: allblocks, block, line","    ","how many total lines are being entered (in the block)?","    int whichBlock = # lines","        Whichever block you are on will have that many lines in the block.","            In: allblocks, block, line","        ","how many total numbers being printed(in the line)?","    int numNums = 2*whichBlock-1 = # numbers","        Whichever block you are on will have (2*whichBlock-1) numbers printed on the line.","            In: line","        ","how many spaces (on left and right)?","    int spaces = x - whichBlock","        Every line will have  ((2x-1) - (2*whichBlock-1))/2","                            = (2x-1-2*whichBlock+1)/2","                            = (2x-2*whichBlock/2)","                            = 2(x-whichBlock)/2","                            = (x-whichBlock) spaces to the left and to the right of the printed numbers.","            In: line","","what about the lines after each block?","    Make sure to print a line when ","        HAVE numBlock EQUAL dashes INSTEAD OF whichBlock WHEN PRINTING THE ADDITIONAL LINE","    PRINT AN ADDITIONAL LINE WITH -'S INSTEAD OF whichBlock WHEN whichBlock == whichLineInBlock","*/","    public static void allBlocks(int x){","        int whichBlock = 1;","        for(whichBlock = 1; whichBlock <= x; whichBlock++){","            block(x, whichBlock);","        }","        return;","        //All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes","        //NEED: x","        //MADE: whichBlock","    }","    ","    public static void block(int x, int whichBlock){","        int whichLineInBlock = 1;","        int numBlock = whichBlock, dashes = 0;","        for(whichLineInBlock = 1; whichLineInBlock <= whichBlock; whichLineInBlock++){","            line(x, whichBlock, whichLineInBlock, numBlock);","            System.out.println();","            if(whichLineInBlock == whichBlock){","                line(x, whichBlock, whichLineInBlock, dashes);","                System.out.println();","            }","        }","        return;","        //All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes","        //NEED: x, whichBlock, ","        //MADE: whichLineInBlock, numBlock, dashes","    }","    ","    public static void line(int x, int whichBlock, int whichLineInBlock, int numBlock){","        int spaces = x - whichBlock;","        int numNums = 2*whichBlock-1;","        int whichSpace = 1;","        int whichNumberInLine = 1;","        for(whichSpace = 1; whichSpace <= spaces; whichSpace++){","            System.out.print(' ');","        }","        for(whichNumberInLine = 1; whichNumberInLine <= numNums; whichNumberInLine++){","            if(numBlock > 0){","                System.out.print(numBlock);","            }else{System.out.print(\"-\");}","            ","        }","        for(whichSpace = 1; whichSpace <= spaces; whichSpace++){","            System.out.print(' ');","        }","        //System.out.print(\"whichBlock: \"+whichBlock+\" whichLineInBlock: \"+whichLineInBlock+\" whichNumberInLine: \"+whichNumberInLine);","        return;","        //All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes","        //NEED: x, whichBlock, whichLineInBlock, numBlock/dashes","        //MADE: spaces, numNums, whichSpace, whichNumberInLine","    }","","}","","/*","allBlocks(int x) (how many blocks) makes number of blocks","block() (the stuff in each block) makes number of lines","line() (the stuff in each line) makes proper numbers and indent spacings"]},{"action":"insertText","range":{"start":{"row":177,"column":0},"end":{"row":177,"column":2}},"text":"*/"}]}]]},"ace":{"folds":[],"scrolltop":2587,"scrollleft":0,"selection":{"start":{"row":177,"column":2},"end":{"row":177,"column":2},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1415080215445}