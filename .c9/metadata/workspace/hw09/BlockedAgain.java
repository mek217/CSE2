{"filter":false,"title":"BlockedAgain.java","tooltip":"/hw09/BlockedAgain.java","undoManager":{"mark":100,"position":100,"stack":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":29,"column":80},"end":{"row":29,"column":81}},"text":"v"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":29,"column":81},"end":{"row":29,"column":82}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":29,"column":61},"end":{"row":29,"column":62}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":29,"column":62},"end":{"row":29,"column":63}},"text":"f"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":29,"column":63},"end":{"row":29,"column":64}},"text":"P"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":29,"column":64},"end":{"row":29,"column":65}},"text":"o"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":29,"column":65},"end":{"row":29,"column":66}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":29,"column":66},"end":{"row":29,"column":67}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":29,"column":67},"end":{"row":29,"column":68}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":29,"column":68},"end":{"row":29,"column":69}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":29,"column":69},"end":{"row":29,"column":70}},"text":"v"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":29,"column":70},"end":{"row":29,"column":71}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":29,"column":71},"end":{"row":29,"column":72}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":29,"column":72},"end":{"row":29,"column":73}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":29,"column":73},"end":{"row":29,"column":74}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":8,"column":15},"end":{"row":8,"column":75}},"text":"Must ask user for an acceptible size of desired block output"},{"action":"insertText","range":{"start":{"row":8,"column":15},"end":{"row":8,"column":37}},"text":"Prompt user for an int"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":55,"column":0},"end":{"row":55,"column":1}},"text":"}"},{"action":"removeLines","range":{"start":{"row":19,"column":0},"end":{"row":55,"column":0}},"nl":"\n","lines":["        int m;","        //force user to enter int in range 1-9, inclusive.","        m = getInt();","        //allBlocks(m);","    }","    ","    public static int getInt(){","        Scanner scan;                                                           //Declare scanner","        scan = new Scanner(System.in);                                          //Call scanner constructor","        System.out.print(\"Enter an int between 1 and 9, inclusive: \");","        for(boolean ifPositive = false; ifPositive == false; ifPositive = checkRange(ifPositive)){","            int userInput = checkInt(scan);","            ifPositive = checkRange(userInput);","        }","        ","        return userInput;","    }","    ","    public static int checkInt(Scanner scan){","        while(true){","            if(scan.hasNextInt()){","                int userNumber = scan.nextInt();","                boolean ifPositive = checkRange(userNumber);","                return userNumber;","            }","            else{","                System.out.print(\"You did not enter an int. Try again: \");","                scan.next();","                continue;","            }","        }","    }","    ","    public static int checkRange(int userInt){","        boolean userInt = (userInt)","    }"]},{"action":"removeText","range":{"start":{"row":18,"column":41},"end":{"row":19,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":18,"column":41},"end":{"row":19,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":19,"column":0},"end":{"row":70,"column":0}},"lines":["        int m;","        //force user to enter int in range 1-9, inclusive.","        m = getInt();","        //allBlocks(m);","    }","/*","Problems & Solutions","[B]: allBlocks(int x): Must print the 'stack' of blocks","    [B1]: block(): print each individual block with same width","        [B1a]: line(): generate each line with the right numbers and indent distance","*/","","    public static int getInt() {                                                //[A]: getInt(): Prompt user for an int","        Scanner scan;","        scan = new Scanner(System.in);","        boolean isDigit = false;","        int userInput = 0;","        System.out.print(\"Enter an int between 1 and 9, inclusive: \");","        while (isDigit != true){","            userInput = checkInt(scan);                                         //[A1]: checkInt()","            isDigit = checkRange(userInput);                                    //[A2]: checkRange()","            if(isDigit == false){","                System.out.print(\"You did not enter an int in [1,9]; try again: \");","                continue;","            }else{break;}","        }","        return userInput;","    }","","    public static int checkInt(Scanner scan){                                   //[A1]: checkInt(): input is an int","        while(true){","            if(scan.hasNextInt()){","                int userNumber = scan.nextInt();","                boolean ifPositive = checkRange(userNumber);","                return userNumber;","            }","            else{","                System.out.print(\"You did not enter an int. try again: \");","                scan.next();","                continue;","            }","        }","    }","","    public static boolean checkRange(int testInt){                              //[A2]: checkRange(): input is positive","        boolean posTest = (testInt >= 1 && testInt <= 9)?true:false;","        return posTest;","    }","    ","    ","    "]},{"action":"insertText","range":{"start":{"row":70,"column":0},"end":{"row":70,"column":1}},"text":"}"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":70,"column":0},"end":{"row":70,"column":1}},"text":"}"},{"action":"removeLines","range":{"start":{"row":19,"column":0},"end":{"row":70,"column":0}},"nl":"\n","lines":["        int m;","        //force user to enter int in range 1-9, inclusive.","        m = getInt();","        //allBlocks(m);","    }","/*","Problems & Solutions","[B]: allBlocks(int x): Must print the 'stack' of blocks","    [B1]: block(): print each individual block with same width","        [B1a]: line(): generate each line with the right numbers and indent distance","*/","","    public static int getInt() {                                                //[A]: getInt(): Prompt user for an int","        Scanner scan;","        scan = new Scanner(System.in);","        boolean isDigit = false;","        int userInput = 0;","        System.out.print(\"Enter an int between 1 and 9, inclusive: \");","        while (isDigit != true){","            userInput = checkInt(scan);                                         //[A1]: checkInt()","            isDigit = checkRange(userInput);                                    //[A2]: checkRange()","            if(isDigit == false){","                System.out.print(\"You did not enter an int in [1,9]; try again: \");","                continue;","            }else{break;}","        }","        return userInput;","    }","","    public static int checkInt(Scanner scan){                                   //[A1]: checkInt(): input is an int","        while(true){","            if(scan.hasNextInt()){","                int userNumber = scan.nextInt();","                boolean ifPositive = checkRange(userNumber);","                return userNumber;","            }","            else{","                System.out.print(\"You did not enter an int. try again: \");","                scan.next();","                continue;","            }","        }","    }","","    public static boolean checkRange(int testInt){                              //[A2]: checkRange(): input is positive","        boolean posTest = (testInt >= 1 && testInt <= 9)?true:false;","        return posTest;","    }","    ","    ","    "]},{"action":"removeText","range":{"start":{"row":18,"column":41},"end":{"row":19,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":18,"column":41},"end":{"row":19,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":19,"column":0},"end":{"row":174,"column":0}},"lines":["        int m;","        //force user to enter int in range 1-9, inclusive.","        m = getInt();","        allBlocks(m);","    }","/*","Problems & Solutions","[B]: allBlocks(int x): Must print the 'stack' of blocks","    [B1]: block(): print each individual block with same width","        [B1a]: line(): generate each line with the right numbers and indent distance","*/","","    public static int getInt() {                                                //[A]: getInt(): Prompt user for an int","        Scanner scan;","        scan = new Scanner(System.in);","        boolean isDigit = false;","        int userInput = 0;","        System.out.print(\"Enter an int between 1 and 9, inclusive: \");","        while (isDigit != true){","            userInput = checkInt(scan);                                         //[A1]: checkInt()","            isDigit = checkRange(userInput);                                    //[A2]: checkRange()","            if(isDigit == false){","                System.out.print(\"You did not enter an int in [1,9]; try again: \");","                continue;","            }else{break;}","        }","        return userInput;","    }","","    public static int checkInt(Scanner scan){                                   //[A1]: checkInt(): input is an int","        while(true){","            if(scan.hasNextInt()){","                int userNumber = scan.nextInt();","                boolean ifPositive = checkRange(userNumber);","                return userNumber;","            }","            else{","                System.out.print(\"You did not enter an int. try again: \");","                scan.next();","                continue;","            }","        }","    }","","    public static boolean checkRange(int testInt){                              //[A2]: checkRange(): input is positive","        boolean posTest = (testInt >= 1 && testInt <= 9)?true:false;","        return posTest;","    }","    ","/*","ALL BLOCKMAKING VARIABLES","All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes, dashes","","Sentry Variables: REMEMBER TO RESET","which Block","    increment up","        whichBlock = 1","            In: allblocks, block, line","which Line","    increment up","        whichLineInBlock = 1","            In: allblocks, block","which Number","    increment up","        whichNumberInLine = 1","            In: allblocks, block, line","which Space","    increment up","        whichSpace = 1","            In: line","            ","Actual Variables:","","how many total blocks are being made(in the program)?","    int x = # blocks","        The user input x: there will be x blocks.","            In: allblocks, block, line","    ","how many total lines are being entered (in the block)?","    int whichBlock = # lines","        Whichever block you are on will have that many lines in the block.","            In: allblocks, block, line","        ","how many total numbers being printed(in the line)?","    int numNums = 2*whichBlock-1 = # numbers","        Whichever block you are on will have (2*whichBlock-1) numbers printed on the line.","            In: line","        ","how many spaces (on left and right)?","    int spaces = x - whichBlock","        Every line will have  ((2x-1) - (2*whichBlock-1))/2","                            = (2x-1-2*whichBlock+1)/2","                            = (2x-2*whichBlock/2)","                            = 2(x-whichBlock)/2","                            = (x-whichBlock) spaces to the left and to the right of the printed numbers.","            In: line","","what about the lines after each block?","    Make sure to print a line when ","        HAVE numBlock EQUAL dashes INSTEAD OF whichBlock WHEN PRINTING THE ADDITIONAL LINE","    PRINT AN ADDITIONAL LINE WITH -'S INSTEAD OF whichBlock WHEN whichBlock == whichLineInBlock","*/","    public static void allBlocks(int x){","        int whichBlock = 1;","        for(whichBlock = 1; whichBlock <= x; whichBlock++){","            System.out.print(\"whichBlock: \"+whichBlock);","            block(x, whichBlock);","        }","        return;","        //All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes","        //NEED: x","        //MADE: whichBlock","    }","    ","    public static void block(int x, int whichBlock){","        int whichLineInBlock = 1;","        int numBlock = whichBlock, dashes = 0;","        for(whichLineInBlock = 1; whichLineInBlock <= whichBlock; whichLineInBlock++){","            line(x, whichBlock, whichLineInBlock, numBlock);","            if(whichLineInBlock == whichBlock){","                line(x, whichBlock, whichLineInBlock, numBlock);","            }","        }","        return;","        //All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes","        //NEED: x, whichBlock, ","        //MADE: whichLineInBlock, numBlock, dashes","    }","    ","    public static void line(int x, int whichBlock, int whichLineInBlock, int numBlock){","        int spaces = x - whichBlock;","        int numNums = 2*whichBlock-1;","        int whichSpace = 1;","        int whichNumberInLine = 1;","        for(whichSpace = 1; whichSpace <= spaces; whichSpace++){","            System.out.print(' ');","        }","        for(whichNumberInLine = 1; whichNumberInLine <= numNums; whichNumberInLine++){","            System.out.print(numBlock);","        }","        for(whichSpace = 1; whichSpace <= spaces; whichSpace++){","            System.out.println(' ');","        }","        return;","        //All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes","        //NEED: x, whichBlock, whichLineInBlock, numBlock/dashes","        //MADE: spaces, numNums, whichSpace, whichNumberInLine","    }","","}","","/*","allBlocks(int x) (how many blocks) makes number of blocks","block() (the stuff in each block) makes number of lines","line() (the stuff in each line) makes proper numbers and indent spacings"]},{"action":"insertText","range":{"start":{"row":174,"column":0},"end":{"row":174,"column":2}},"text":"*/"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":174,"column":0},"end":{"row":174,"column":2}},"text":"*/"},{"action":"removeLines","range":{"start":{"row":19,"column":0},"end":{"row":174,"column":0}},"nl":"\n","lines":["        int m;","        //force user to enter int in range 1-9, inclusive.","        m = getInt();","        allBlocks(m);","    }","/*","Problems & Solutions","[B]: allBlocks(int x): Must print the 'stack' of blocks","    [B1]: block(): print each individual block with same width","        [B1a]: line(): generate each line with the right numbers and indent distance","*/","","    public static int getInt() {                                                //[A]: getInt(): Prompt user for an int","        Scanner scan;","        scan = new Scanner(System.in);","        boolean isDigit = false;","        int userInput = 0;","        System.out.print(\"Enter an int between 1 and 9, inclusive: \");","        while (isDigit != true){","            userInput = checkInt(scan);                                         //[A1]: checkInt()","            isDigit = checkRange(userInput);                                    //[A2]: checkRange()","            if(isDigit == false){","                System.out.print(\"You did not enter an int in [1,9]; try again: \");","                continue;","            }else{break;}","        }","        return userInput;","    }","","    public static int checkInt(Scanner scan){                                   //[A1]: checkInt(): input is an int","        while(true){","            if(scan.hasNextInt()){","                int userNumber = scan.nextInt();","                boolean ifPositive = checkRange(userNumber);","                return userNumber;","            }","            else{","                System.out.print(\"You did not enter an int. try again: \");","                scan.next();","                continue;","            }","        }","    }","","    public static boolean checkRange(int testInt){                              //[A2]: checkRange(): input is positive","        boolean posTest = (testInt >= 1 && testInt <= 9)?true:false;","        return posTest;","    }","    ","/*","ALL BLOCKMAKING VARIABLES","All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes, dashes","","Sentry Variables: REMEMBER TO RESET","which Block","    increment up","        whichBlock = 1","            In: allblocks, block, line","which Line","    increment up","        whichLineInBlock = 1","            In: allblocks, block","which Number","    increment up","        whichNumberInLine = 1","            In: allblocks, block, line","which Space","    increment up","        whichSpace = 1","            In: line","            ","Actual Variables:","","how many total blocks are being made(in the program)?","    int x = # blocks","        The user input x: there will be x blocks.","            In: allblocks, block, line","    ","how many total lines are being entered (in the block)?","    int whichBlock = # lines","        Whichever block you are on will have that many lines in the block.","            In: allblocks, block, line","        ","how many total numbers being printed(in the line)?","    int numNums = 2*whichBlock-1 = # numbers","        Whichever block you are on will have (2*whichBlock-1) numbers printed on the line.","            In: line","        ","how many spaces (on left and right)?","    int spaces = x - whichBlock","        Every line will have  ((2x-1) - (2*whichBlock-1))/2","                            = (2x-1-2*whichBlock+1)/2","                            = (2x-2*whichBlock/2)","                            = 2(x-whichBlock)/2","                            = (x-whichBlock) spaces to the left and to the right of the printed numbers.","            In: line","","what about the lines after each block?","    Make sure to print a line when ","        HAVE numBlock EQUAL dashes INSTEAD OF whichBlock WHEN PRINTING THE ADDITIONAL LINE","    PRINT AN ADDITIONAL LINE WITH -'S INSTEAD OF whichBlock WHEN whichBlock == whichLineInBlock","*/","    public static void allBlocks(int x){","        int whichBlock = 1;","        for(whichBlock = 1; whichBlock <= x; whichBlock++){","            System.out.print(\"whichBlock: \"+whichBlock);","            block(x, whichBlock);","        }","        return;","        //All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes","        //NEED: x","        //MADE: whichBlock","    }","    ","    public static void block(int x, int whichBlock){","        int whichLineInBlock = 1;","        int numBlock = whichBlock, dashes = 0;","        for(whichLineInBlock = 1; whichLineInBlock <= whichBlock; whichLineInBlock++){","            line(x, whichBlock, whichLineInBlock, numBlock);","            if(whichLineInBlock == whichBlock){","                line(x, whichBlock, whichLineInBlock, numBlock);","            }","        }","        return;","        //All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes","        //NEED: x, whichBlock, ","        //MADE: whichLineInBlock, numBlock, dashes","    }","    ","    public static void line(int x, int whichBlock, int whichLineInBlock, int numBlock){","        int spaces = x - whichBlock;","        int numNums = 2*whichBlock-1;","        int whichSpace = 1;","        int whichNumberInLine = 1;","        for(whichSpace = 1; whichSpace <= spaces; whichSpace++){","            System.out.print(' ');","        }","        for(whichNumberInLine = 1; whichNumberInLine <= numNums; whichNumberInLine++){","            System.out.print(numBlock);","        }","        for(whichSpace = 1; whichSpace <= spaces; whichSpace++){","            System.out.println(' ');","        }","        return;","        //All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes","        //NEED: x, whichBlock, whichLineInBlock, numBlock/dashes","        //MADE: spaces, numNums, whichSpace, whichNumberInLine","    }","","}","","/*","allBlocks(int x) (how many blocks) makes number of blocks","block() (the stuff in each block) makes number of lines","line() (the stuff in each line) makes proper numbers and indent spacings"]},{"action":"removeText","range":{"start":{"row":18,"column":41},"end":{"row":19,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":18,"column":41},"end":{"row":19,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":19,"column":0},"end":{"row":179,"column":0}},"lines":["        int m;","        //force user to enter int in range 1-9, inclusive.","        m = getInt();","        allBlocks(m);","    }","/*","Problems & Solutions","[B]: allBlocks(int x): Must print the 'stack' of blocks","    [B1]: block(): print each individual block with same width","        [B1a]: line(): generate each line with the right numbers and indent distance","*/","","    public static int getInt() {                                                //[A]: getInt(): Prompt user for an int","        Scanner scan;","        scan = new Scanner(System.in);","        boolean isDigit = false;","        int userInput = 0;","        System.out.print(\"Enter an int between 1 and 9, inclusive: \");","        while (isDigit != true){","            userInput = checkInt(scan);                                         //[A1]: checkInt()","            isDigit = checkRange(userInput);                                    //[A2]: checkRange()","            if(isDigit == false){","                System.out.print(\"You did not enter an int in [1,9]; try again: \");","                continue;","            }else{break;}","        }","        return userInput;","    }","","    public static int checkInt(Scanner scan){                                   //[A1]: checkInt(): input is an int","        while(true){","            if(scan.hasNextInt()){","                int userNumber = scan.nextInt();","                boolean ifPositive = checkRange(userNumber);","                return userNumber;","            }","            else{","                System.out.print(\"You did not enter an int. try again: \");","                scan.next();","                continue;","            }","        }","    }","","    public static boolean checkRange(int testInt){                              //[A2]: checkRange(): input is positive","        boolean posTest = (testInt >= 1 && testInt <= 9)?true:false;","        return posTest;","    }","    ","/*","ALL BLOCKMAKING VARIABLES","All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes, dashes","","Sentry Variables: REMEMBER TO RESET","which Block","    increment up","        whichBlock = 1","            In: allblocks, block, line","which Line","    increment up","        whichLineInBlock = 1","            In: allblocks, block","which Number","    increment up","        whichNumberInLine = 1","            In: allblocks, block, line","which Space","    increment up","        whichSpace = 1","            In: line","            ","Actual Variables:","","how many total blocks are being made(in the program)?","    int x = # blocks","        The user input x: there will be x blocks.","            In: allblocks, block, line","    ","how many total lines are being entered (in the block)?","    int whichBlock = # lines","        Whichever block you are on will have that many lines in the block.","            In: allblocks, block, line","        ","how many total numbers being printed(in the line)?","    int numNums = 2*whichBlock-1 = # numbers","        Whichever block you are on will have (2*whichBlock-1) numbers printed on the line.","            In: line","        ","how many spaces (on left and right)?","    int spaces = x - whichBlock","        Every line will have  ((2x-1) - (2*whichBlock-1))/2","                            = (2x-1-2*whichBlock+1)/2","                            = (2x-2*whichBlock/2)","                            = 2(x-whichBlock)/2","                            = (x-whichBlock) spaces to the left and to the right of the printed numbers.","            In: line","","what about the lines after each block?","    Make sure to print a line when ","        HAVE numBlock EQUAL dashes INSTEAD OF whichBlock WHEN PRINTING THE ADDITIONAL LINE","    PRINT AN ADDITIONAL LINE WITH -'S INSTEAD OF whichBlock WHEN whichBlock == whichLineInBlock","*/","    public static void allBlocks(int x){","        int whichBlock = 1;","        for(whichBlock = 1; whichBlock <= x; whichBlock++){","            block(x, whichBlock);","        }","        return;","        //All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes","        //NEED: x","        //MADE: whichBlock","    }","    ","    public static void block(int x, int whichBlock){","        int whichLineInBlock = 1;","        int numBlock = whichBlock, dashes = 0;","        for(whichLineInBlock = 1; whichLineInBlock <= whichBlock; whichLineInBlock++){","            line(x, whichBlock, whichLineInBlock, numBlock);","            System.out.println();","            if(whichLineInBlock == whichBlock){","                line(x, whichBlock, whichLineInBlock, dashes);","                System.out.println();","            }","        }","        return;","        //All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes","        //NEED: x, whichBlock, ","        //MADE: whichLineInBlock, numBlock, dashes","    }","    ","    public static void line(int x, int whichBlock, int whichLineInBlock, int numBlock){","        int spaces = x - whichBlock;","        int numNums = 2*whichBlock-1;","        int whichSpace = 1;","        int whichNumberInLine = 1;","        for(whichSpace = 1; whichSpace <= spaces; whichSpace++){","            System.out.print(' ');","        }","        for(whichNumberInLine = 1; whichNumberInLine <= numNums; whichNumberInLine++){","            if(numBlock > 0){","                System.out.print(numBlock);","            }else{System.out.print(\"-\");}","            ","        }","        for(whichSpace = 1; whichSpace <= spaces; whichSpace++){","            System.out.print(' ');","        }","        //System.out.print(\"whichBlock: \"+whichBlock+\" whichLineInBlock: \"+whichLineInBlock+\" whichNumberInLine: \"+whichNumberInLine);","        return;","        //All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes","        //NEED: x, whichBlock, whichLineInBlock, numBlock/dashes","        //MADE: spaces, numNums, whichSpace, whichNumberInLine","    }","","}","","/*","allBlocks(int x) (how many blocks) makes number of blocks","block() (the stuff in each block) makes number of lines","line() (the stuff in each line) makes proper numbers and indent spacings"]},{"action":"insertText","range":{"start":{"row":179,"column":0},"end":{"row":179,"column":2}},"text":"*/"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":26,"column":0},"end":{"row":26,"column":1}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":26,"column":1},"end":{"row":26,"column":2}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":4},"end":{"row":27,"column":5}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":27,"column":5},"end":{"row":27,"column":6}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":8},"end":{"row":28,"column":9}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":9},"end":{"row":28,"column":10}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":26,"column":0},"end":{"row":26,"column":57}},"text":"//[B]: allBlocks(int x): Must print the 'stack' of blocks"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":121,"column":40},"end":{"row":121,"column":97}},"text":"//[B]: allBlocks(int x): Must print the 'stack' of blocks"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":121,"column":40},"end":{"row":121,"column":44}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":121,"column":44},"end":{"row":121,"column":48}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":121,"column":48},"end":{"row":121,"column":52}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":121,"column":52},"end":{"row":121,"column":56}},"text":"    "},{"action":"insertText","range":{"start":{"row":121,"column":56},"end":{"row":121,"column":60}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":121,"column":60},"end":{"row":121,"column":64}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":121,"column":64},"end":{"row":121,"column":68}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":121,"column":68},"end":{"row":121,"column":72}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":121,"column":72},"end":{"row":121,"column":76}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":121,"column":76},"end":{"row":121,"column":80}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":27,"column":4},"end":{"row":27,"column":64}},"text":"//[B1]: block(): print each individual block with same width"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":132,"column":52},"end":{"row":132,"column":112}},"text":"//[B1]: block(): print each individual block with same width"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":132,"column":52},"end":{"row":132,"column":56}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":132,"column":56},"end":{"row":132,"column":60}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":132,"column":60},"end":{"row":132,"column":64}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":132,"column":64},"end":{"row":132,"column":68}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":132,"column":68},"end":{"row":132,"column":72}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":132,"column":72},"end":{"row":132,"column":76}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":132,"column":76},"end":{"row":132,"column":80}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":132,"column":80},"end":{"row":132,"column":84}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":132,"column":80},"end":{"row":132,"column":84}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":28,"column":8},"end":{"row":28,"column":86}},"text":"//[B1a]: line(): generate each line with the right numbers and indent distance"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":149,"column":87},"end":{"row":149,"column":165}},"text":"//[B1a]: line(): generate each line with the right numbers and indent distance"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":149,"column":87},"end":{"row":149,"column":88}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":149,"column":88},"end":{"row":149,"column":92}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":132,"column":80},"end":{"row":132,"column":84}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":132,"column":84},"end":{"row":132,"column":88}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":132,"column":84},"end":{"row":132,"column":88}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":132,"column":80},"end":{"row":132,"column":84}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":145,"column":0},"end":{"row":145,"column":8}},"text":"        "},{"action":"removeLines","range":{"start":{"row":144,"column":0},"end":{"row":145,"column":0}},"nl":"\n","lines":["        //All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes"]},{"action":"removeText","range":{"start":{"row":143,"column":15},"end":{"row":144,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":143,"column":15},"end":{"row":144,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":144,"column":0},"end":{"row":144,"column":8}},"text":"        "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":168,"column":0},"end":{"row":168,"column":8}},"text":"        "},{"action":"removeLines","range":{"start":{"row":167,"column":0},"end":{"row":168,"column":0}},"nl":"\n","lines":["        //All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes"]},{"action":"removeText","range":{"start":{"row":166,"column":15},"end":{"row":167,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":166,"column":15},"end":{"row":167,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":167,"column":0},"end":{"row":167,"column":8}},"text":"        "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":165,"column":8},"end":{"row":165,"column":134}},"text":"//System.out.print(\"whichBlock: \"+whichBlock+\" whichLineInBlock: \"+whichLineInBlock+\" whichNumberInLine: \"+whichNumberInLine);"},{"action":"removeText","range":{"start":{"row":165,"column":8},"end":{"row":166,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":165,"column":4},"end":{"row":165,"column":8}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":165,"column":0},"end":{"row":165,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":164,"column":9},"end":{"row":165,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":164,"column":9},"end":{"row":164,"column":17}},"text":"        "},{"action":"insertText","range":{"start":{"row":164,"column":9},"end":{"row":165,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":165,"column":0},"end":{"row":165,"column":8}},"text":"        "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":128,"column":0},"end":{"row":128,"column":8}},"text":"        "},{"action":"removeText","range":{"start":{"row":127,"column":8},"end":{"row":127,"column":158}},"text":"//All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes"},{"action":"removeText","range":{"start":{"row":127,"column":8},"end":{"row":128,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":120,"column":0},"end":{"row":120,"column":2}},"text":"*/"},{"action":"removeLines","range":{"start":{"row":69,"column":0},"end":{"row":120,"column":0}},"nl":"\n","lines":["ALL BLOCKMAKING VARIABLES","All variables: int x, int whichBlock, int whichLineInBlock, int whichNumberInLine, int whichSpace, int numNums, int spaces, int numBlock, int dashes, dashes","","Sentry Variables: REMEMBER TO RESET","which Block","    increment up","        whichBlock = 1","            In: allblocks, block, line","which Line","    increment up","        whichLineInBlock = 1","            In: allblocks, block","which Number","    increment up","        whichNumberInLine = 1","            In: allblocks, block, line","which Space","    increment up","        whichSpace = 1","            In: line","            ","Actual Variables:","","how many total blocks are being made(in the program)?","    int x = # blocks","        The user input x: there will be x blocks.","            In: allblocks, block, line","    ","how many total lines are being entered (in the block)?","    int whichBlock = # lines","        Whichever block you are on will have that many lines in the block.","            In: allblocks, block, line","        ","how many total numbers being printed(in the line)?","    int numNums = 2*whichBlock-1 = # numbers","        Whichever block you are on will have (2*whichBlock-1) numbers printed on the line.","            In: line","        ","how many spaces (on left and right)?","    int spaces = x - whichBlock","        Every line will have  ((2x-1) - (2*whichBlock-1))/2","                            = (2x-1-2*whichBlock+1)/2","                            = (2x-2*whichBlock/2)","                            = 2(x-whichBlock)/2","                            = (x-whichBlock) spaces to the left and to the right of the printed numbers.","            In: line","","what about the lines after each block?","    Make sure to print a line when ","        HAVE numBlock EQUAL dashes INSTEAD OF whichBlock WHEN PRINTING THE ADDITIONAL LINE","    PRINT AN ADDITIONAL LINE WITH -'S INSTEAD OF whichBlock WHEN whichBlock == whichLineInBlock"]},{"action":"removeText","range":{"start":{"row":68,"column":2},"end":{"row":69,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":68,"column":1},"end":{"row":68,"column":2}},"text":"*"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":68,"column":0},"end":{"row":68,"column":1}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":67,"column":4},"end":{"row":68,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":78,"column":82},"end":{"row":78,"column":95}},"text":"[B1]: block()"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":78,"column":82},"end":{"row":78,"column":95}},"text":"[B1]: block()"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":33},"end":{"row":71,"column":46}},"text":"[B1]: block()"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":33},"end":{"row":71,"column":34}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":34},"end":{"row":71,"column":36}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":36},"end":{"row":71,"column":40}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":40},"end":{"row":71,"column":44}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":44},"end":{"row":71,"column":48}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":48},"end":{"row":71,"column":52}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":52},"end":{"row":71,"column":56}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":56},"end":{"row":71,"column":60}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":60},"end":{"row":71,"column":64}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":64},"end":{"row":71,"column":68}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":68},"end":{"row":71,"column":72}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":72},"end":{"row":71,"column":76}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":76},"end":{"row":71,"column":80}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":80},"end":{"row":71,"column":81}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":81},"end":{"row":71,"column":82}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":71,"column":33},"end":{"row":71,"column":34}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":33},"end":{"row":71,"column":34}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":60},"end":{"row":82,"column":75}},"text":"//[B1a]: line()"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":85,"column":62},"end":{"row":85,"column":77}},"text":"//[B1a]: line()"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":60},"end":{"row":82,"column":64}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":85,"column":62},"end":{"row":85,"column":64}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":85,"column":64},"end":{"row":85,"column":68}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":85,"column":68},"end":{"row":85,"column":72}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":85,"column":72},"end":{"row":85,"column":76}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":85,"column":76},"end":{"row":85,"column":80}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":64},"end":{"row":82,"column":68}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":68},"end":{"row":82,"column":72}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":72},"end":{"row":82,"column":76}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":76},"end":{"row":82,"column":80}},"text":"    "}]}]]},"ace":{"folds":[],"scrolltop":334.5,"scrollleft":0,"selection":{"start":{"row":41,"column":83},"end":{"row":41,"column":83},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":17,"state":"start","mode":"ace/mode/java"}},"timestamp":1415080480306,"hash":"b53ee62e756056497afe8376a5f2090cf13db3a9"}